{"version":3,"sources":["index.js"],"names":["initTreeData","title","key","isLeaf","updateTreeData","list","children","map","node","Demo","useState","treeData","setTreeData","loadData","Promise","resolve","lvl","split","length","childs","size","Math","max","pow","i","push","setTimeout","origin","checkable","ReactDOM","render","document","getElementById"],"mappings":"wLAKMA,EAAe,CACnB,CACEC,MAAO,iBACPC,IAAK,KAEP,CACED,MAAO,iBACPC,IAAK,KAEP,CACED,MAAO,YACPC,IAAK,IACLC,QAAQ,IAIZ,SAASC,EAAeC,EAAMH,EAAKI,GACjC,OAAOD,EAAKE,KAAI,SAACC,GACf,OAAIA,EAAKN,MAAQA,EACR,2BAAKM,GAAZ,IAAkBF,aAGhBE,EAAKF,SACA,2BACFE,GADL,IAEEF,SAAUF,EAAeI,EAAKF,SAAUJ,EAAKI,KAI1CE,KAIX,IAAMC,EAAO,WACX,MAAgCC,mBAASV,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KAwBA,OAAO,cAAC,IAAD,CAAMC,SAtBb,YAAwC,IAAlBX,EAAiB,EAAjBA,IAAKI,EAAY,EAAZA,SACzB,OAAO,IAAIQ,SAAQ,SAACC,GAClB,GAAIT,EACFS,QADF,CAOA,IAHA,IAAMC,EAAMd,EAAIe,MAAM,KAAKC,OACrBC,EAAS,GACTC,EAAOC,KAAKC,IAAI,IAAMD,KAAKE,IAAI,GAAIP,IAChCQ,EAAI,EAAGA,EAAIJ,EAAMI,IACxBL,EAAOM,KAAK,CACVxB,MAAO,aACPC,IAAI,GAAD,OAAKA,EAAL,YAAYsB,KAGnBE,YAAW,WACTd,GAAY,SAACe,GAAD,OAAYvB,EAAeuB,EAAQzB,EAAKiB,MACpDJ,MACC,UAI4Ba,WAAS,EAACjB,SAAUA,KAGzDkB,IAASC,OAAO,cAACrB,EAAD,IAAUsB,SAASC,eAAe,e","file":"static/js/main.674d3278.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Tree } from \"antd\";\nconst initTreeData = [\n  {\n    title: \"Expand to load\",\n    key: \"0\"\n  },\n  {\n    title: \"Expand to load\",\n    key: \"1\"\n  },\n  {\n    title: \"Tree Node\",\n    key: \"2\",\n    isLeaf: true\n  }\n]; // It's just a simple demo. You can use tree map to optimize update perf.\n\nfunction updateTreeData(list, key, children) {\n  return list.map((node) => {\n    if (node.key === key) {\n      return { ...node, children };\n    }\n\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, children)\n      };\n    }\n\n    return node;\n  });\n}\n\nconst Demo = () => {\n  const [treeData, setTreeData] = useState(initTreeData);\n\n  function onLoadData({ key, children }) {\n    return new Promise((resolve) => {\n      if (children) {\n        resolve();\n        return;\n      }\n      const lvl = key.split(\"-\").length;\n      const childs = [];\n      const size = Math.max(2000, Math.pow(10, lvl));\n      for (let i = 0; i < size; i++) {\n        childs.push({\n          title: \"Child Node\",\n          key: `${key}-${i}`\n        });\n      }\n      setTimeout(() => {\n        setTreeData((origin) => updateTreeData(origin, key, childs));\n        resolve();\n      }, 1000);\n    });\n  }\n\n  return <Tree loadData={onLoadData} checkable treeData={treeData} />;\n};\n\nReactDOM.render(<Demo />, document.getElementById(\"container\"));\n"],"sourceRoot":""}